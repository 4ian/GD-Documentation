{
    "project": {
        "name": "Game Develop JS Runtime API",
        "description": "Game Develop JS Runtime: An engine for developing javascript based games using Game Develop",
        "version": "1",
        "url": "http://www.compilgames.net",
        "paths": [
            "../Runtime"
        ]
    },
    "files": {
        "..\\Runtime\\cameratools.js": {
            "name": "..\\Runtime\\cameratools.js",
            "modules": {},
            "classes": {
                "gdjs.evtTools.camera": 1
            },
            "fors": {},
            "namespaces": {
                "gdjs.evtTools": 1
            }
        },
        "..\\Runtime\\commontools.js": {
            "name": "..\\Runtime\\commontools.js",
            "modules": {},
            "classes": {
                "gdjs.evtTools.common": 1
            },
            "fors": {},
            "namespaces": {
                "gdjs.evtTools": 1
            }
        },
        "..\\Runtime\\eventscontext.js": {
            "name": "..\\Runtime\\eventscontext.js",
            "modules": {},
            "classes": {
                "gdjs.EventsContext": 1
            },
            "fors": {},
            "namespaces": {
                "gdjs": 1
            }
        },
        "..\\Runtime\\force.js": {
            "name": "..\\Runtime\\force.js",
            "modules": {},
            "classes": {
                "gdjs.Force": 1
            },
            "fors": {},
            "namespaces": {
                "gdjs": 1
            }
        },
        "..\\Runtime\\gd.js": {
            "name": "..\\Runtime\\gd.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {
                "gdjs": 1
            }
        },
        "..\\Runtime\\imagemanager.js": {
            "name": "..\\Runtime\\imagemanager.js",
            "modules": {},
            "classes": {
                "gdjs.ImageManager": 1
            },
            "fors": {},
            "namespaces": {
                "gdjs": 1
            }
        },
        "..\\Runtime\\inputtools.js": {
            "name": "..\\Runtime\\inputtools.js",
            "modules": {},
            "classes": {
                "gdjs.evtTools.input": 1
            },
            "fors": {},
            "namespaces": {
                "gdjs.evtTools": 1
            }
        },
        "..\\Runtime\\layer.js": {
            "name": "..\\Runtime\\layer.js",
            "modules": {},
            "classes": {
                "gdjs.Layer": 1
            },
            "fors": {},
            "namespaces": {
                "gdjs": 1
            }
        },
        "..\\Runtime\\networktools.js": {
            "name": "..\\Runtime\\networktools.js",
            "modules": {},
            "classes": {
                "gdjs.evtTools.network": 1
            },
            "fors": {},
            "namespaces": {
                "gdjs.evtTools": 1
            }
        },
        "..\\Runtime\\objecttools.js": {
            "name": "..\\Runtime\\objecttools.js",
            "modules": {},
            "classes": {
                "gdjs.evtTools.object": 1
            },
            "fors": {},
            "namespaces": {
                "gdjs.evtTools": 1
            }
        },
        "..\\Runtime\\polygon.js": {
            "name": "..\\Runtime\\polygon.js",
            "modules": {},
            "classes": {
                "gdjs.Polygon": 1
            },
            "fors": {},
            "namespaces": {
                "gdjs": 1
            }
        },
        "..\\Runtime\\runtimeautomatism.js": {
            "name": "..\\Runtime\\runtimeautomatism.js",
            "modules": {},
            "classes": {
                "gdjs.RuntimeAutomatism": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\Runtime\\runtimegame.js": {
            "name": "..\\Runtime\\runtimegame.js",
            "modules": {},
            "classes": {
                "gdjs.RuntimeGame": 1
            },
            "fors": {},
            "namespaces": {
                "gdjs": 1
            }
        },
        "..\\Runtime\\runtimeobject.js": {
            "name": "..\\Runtime\\runtimeobject.js",
            "modules": {},
            "classes": {
                "gdjs.RuntimeObject": 1
            },
            "fors": {},
            "namespaces": {
                "gdjs": 1
            }
        },
        "..\\Runtime\\runtimescene.js": {
            "name": "..\\Runtime\\runtimescene.js",
            "modules": {},
            "classes": {
                "gdjs.RuntimeScene": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\Runtime\\runtimescenetools.js": {
            "name": "..\\Runtime\\runtimescenetools.js",
            "modules": {},
            "classes": {
                "gdjs.evtTools.runtimeScene": 1
            },
            "fors": {},
            "namespaces": {
                "gdjs.evtTools": 1
            }
        },
        "..\\Runtime\\soundmanager.js": {
            "name": "..\\Runtime\\soundmanager.js",
            "modules": {},
            "classes": {
                "gdjs.Sound": 1,
                "gdjs.SoundManager": 1
            },
            "fors": {},
            "namespaces": {
                "gdjs": 1
            }
        },
        "..\\Runtime\\soundtools.js": {
            "name": "..\\Runtime\\soundtools.js",
            "modules": {},
            "classes": {
                "gdjs.evtTools.sound": 1
            },
            "fors": {},
            "namespaces": {
                "gdjs.evtTools": 1
            }
        },
        "..\\Runtime\\spriteruntimeobject.js": {
            "name": "..\\Runtime\\spriteruntimeobject.js",
            "modules": {},
            "classes": {
                "gdjs.SpriteAnimationFrame": 1,
                "gdjs.SpriteAnimation": 1,
                "gdjs.SpriteRuntimeObject": 1
            },
            "fors": {},
            "namespaces": {
                "gdjs": 1
            }
        },
        "..\\Runtime\\storagetools.js": {
            "name": "..\\Runtime\\storagetools.js",
            "modules": {},
            "classes": {
                "gdjs.evtTools.storage": 1
            },
            "fors": {},
            "namespaces": {
                "gdjs.evtTools": 1
            }
        },
        "..\\Runtime\\stringtools.js": {
            "name": "..\\Runtime\\stringtools.js",
            "modules": {},
            "classes": {
                "gdjs.evtTools.string": 1
            },
            "fors": {},
            "namespaces": {
                "gdjs.evtTools": 1
            }
        },
        "..\\Runtime\\timer.js": {
            "name": "..\\Runtime\\timer.js",
            "modules": {},
            "classes": {
                "gdjs.Timer": 1
            },
            "fors": {},
            "namespaces": {
                "gdjs": 1
            }
        },
        "..\\Runtime\\variable.js": {
            "name": "..\\Runtime\\variable.js",
            "modules": {},
            "classes": {
                "gdjs.Variable": 1
            },
            "fors": {},
            "namespaces": {
                "gdjs": 1
            }
        },
        "..\\Runtime\\variablescontainer.js": {
            "name": "..\\Runtime\\variablescontainer.js",
            "modules": {},
            "classes": {
                "gdjs.VariablesContainer": 1
            },
            "fors": {},
            "namespaces": {
                "gdjs": 1
            }
        },
        "..\\Runtime\\windowtools.js": {
            "name": "..\\Runtime\\windowtools.js",
            "modules": {},
            "classes": {
                "gdjs.evtTools.window": 1
            },
            "fors": {},
            "namespaces": {
                "gdjs.evtTools": 1
            }
        }
    },
    "modules": {},
    "classes": {
        "gdjs.evtTools.camera": {
            "name": "gdjs.evtTools.camera",
            "shortname": "gdjs.evtTools.camera",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "gdjs.evtTools",
            "file": "..\\Runtime\\cameratools.js",
            "line": 7,
            "access": "private",
            "tagname": "",
            "static": 1
        },
        "gdjs.evtTools.common": {
            "name": "gdjs.evtTools.common",
            "shortname": "gdjs.evtTools.common",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "gdjs.evtTools",
            "file": "..\\Runtime\\commontools.js",
            "line": 7,
            "static": 1,
            "access": "private",
            "tagname": ""
        },
        "gdjs.EventsContext": {
            "name": "gdjs.EventsContext",
            "shortname": "gdjs.EventsContext",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "gdjs",
            "file": "..\\Runtime\\eventscontext.js",
            "line": 7,
            "description": "EventsContext contains specific tools and data structures used\nby events generated code only.",
            "is_constructor": 1
        },
        "gdjs.Force": {
            "name": "gdjs.Force",
            "shortname": "gdjs.Force",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "gdjs",
            "file": "..\\Runtime\\force.js",
            "line": 7,
            "description": "A Force is used to move objects.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "The initial x component"
                },
                {
                    "name": "y",
                    "description": "The initial y component"
                },
                {
                    "name": "isTemporary",
                    "description": "true if the force must be temporary"
                }
            ]
        },
        "gdjs.ImageManager": {
            "name": "gdjs.ImageManager",
            "shortname": "gdjs.ImageManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "gdjs",
            "file": "..\\Runtime\\imagemanager.js",
            "line": 7,
            "description": "The imageManager stores textures this.can be used by the objects",
            "params": [
                {
                    "name": "runtimeGame",
                    "description": "The runtimeGame to be imageManager belongs to."
                }
            ]
        },
        "gdjs.evtTools.input": {
            "name": "gdjs.evtTools.input",
            "shortname": "gdjs.evtTools.input",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "gdjs.evtTools",
            "file": "..\\Runtime\\inputtools.js",
            "line": 7,
            "description": "Tools related to input ( Keyboard, mouse ), for events generated code.\n\nTODO : Map all keys<br>\nTODO : Implement others buttons for mouse<br>",
            "static": 1,
            "access": "private",
            "tagname": ""
        },
        "gdjs.Layer": {
            "name": "gdjs.Layer",
            "shortname": "gdjs.Layer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "gdjs",
            "file": "..\\Runtime\\layer.js",
            "line": 7,
            "description": "Represents a layer used to display objects.<br>\nThe layer connects its Pixi container to the Pixi stage during its construction,\nbut then it is objects responsibility to connect themselves to the layer's container\n( See addChildToPIXIContainer method ).<br>\nLayers do not provide direct access to their pixi container as they do some extra work\nto ensure that z orders remains correct.\n\n<b>TODO:</b> Viewports and support for multiple cameras",
            "is_constructor": 1
        },
        "gdjs.evtTools.network": {
            "name": "gdjs.evtTools.network",
            "shortname": "gdjs.evtTools.network",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "gdjs.evtTools",
            "file": "..\\Runtime\\networktools.js",
            "line": 7,
            "static": 1,
            "access": "private",
            "tagname": ""
        },
        "gdjs.evtTools.object": {
            "name": "gdjs.evtTools.object",
            "shortname": "gdjs.evtTools.object",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "gdjs.evtTools",
            "file": "..\\Runtime\\objecttools.js",
            "line": 7,
            "description": "Tools related to objects, for events generated code.",
            "static": 1,
            "access": "private",
            "tagname": ""
        },
        "gdjs.Polygon": {
            "name": "gdjs.Polygon",
            "shortname": "gdjs.Polygon",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "gdjs",
            "file": "..\\Runtime\\polygon.js",
            "line": 7,
            "description": "Polygon represents a polygon which can be used to create collisions masks for RuntimeObject.",
            "is_constructor": 1
        },
        "gdjs.RuntimeAutomatism": {
            "name": "gdjs.RuntimeAutomatism",
            "shortname": "RuntimeAutomatism",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "gdjs",
            "file": "..\\Runtime\\runtimeautomatism.js",
            "line": 7,
            "description": "RuntimeAutomatism represents an automatism being used by a RuntimeObject.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "runtimeScene",
                    "description": "The scene owning the object of the automatism"
                },
                {
                    "name": "automatismData",
                    "description": "The object used to setup the automatism"
                },
                {
                    "name": "owner",
                    "description": "The object owning the automatism"
                }
            ]
        },
        "gdjs.RuntimeGame": {
            "name": "gdjs.RuntimeGame",
            "shortname": "gdjs.RuntimeGame",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "gdjs",
            "file": "..\\Runtime\\runtimegame.js",
            "line": 7,
            "description": "Represents a game being played.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "data",
                    "description": "The object (usually stored in data.json) containing the full project data"
                },
                {
                    "name": "spec",
                    "description": "Optional object for specifiying additional options:",
                    "type": "forceFullscreen: ..."
                }
            ]
        },
        "gdjs.RuntimeObject": {
            "name": "gdjs.RuntimeObject",
            "shortname": "gdjs.RuntimeObject",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "gdjs",
            "file": "..\\Runtime\\runtimeobject.js",
            "line": 7,
            "description": "RuntimeObject represents an object being used on a RuntimeScene.<br>\nThe constructor can be called on an already existing RuntimeObject:\nIn this case, the constructor will try to reuse as much already existing members\nas possible ( Recycling ).<br>\nHowever, you should not be calling the constructor on an already existing object\nwhich is not a RuntimeObject.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "runtimeScene",
                    "description": "The RuntimeScene owning the object."
                },
                {
                    "name": "objectData",
                    "description": "The data defining the object"
                }
            ]
        },
        "gdjs.RuntimeScene": {
            "name": "gdjs.RuntimeScene",
            "shortname": "RuntimeScene",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "gdjs",
            "file": "..\\Runtime\\runtimescene.js",
            "line": 7,
            "description": "The runtimeScene object represents a scene being played and rendered in the browser in a canvas.",
            "params": [
                {
                    "name": "PixiRenderer",
                    "description": "The PIXI.Renderer to be used"
                }
            ]
        },
        "gdjs.evtTools.runtimeScene": {
            "name": "gdjs.evtTools.runtimeScene",
            "shortname": "gdjs.evtTools.runtimeScene",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "gdjs.evtTools",
            "file": "..\\Runtime\\runtimescenetools.js",
            "line": 7,
            "description": "Tools related to runtime scene, for events generated code.",
            "static": 1,
            "access": "private",
            "tagname": ""
        },
        "gdjs.Sound": {
            "name": "gdjs.Sound",
            "shortname": "gdjs.Sound",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "gdjs",
            "file": "..\\Runtime\\soundmanager.js",
            "line": 7,
            "description": "A wrapper around an Audio object.",
            "access": "private",
            "tagname": ""
        },
        "gdjs.SoundManager": {
            "name": "gdjs.SoundManager",
            "shortname": "gdjs.SoundManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "gdjs",
            "file": "..\\Runtime\\soundmanager.js",
            "line": 97,
            "description": "SoundManager is used to manage the sounds and musics of a RuntimeScene.",
            "is_constructor": 1
        },
        "gdjs.evtTools.sound": {
            "name": "gdjs.evtTools.sound",
            "shortname": "gdjs.evtTools.sound",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "gdjs.evtTools",
            "file": "..\\Runtime\\soundtools.js",
            "line": 7,
            "description": "Class used by events to interact with the soundManager.",
            "static": 1,
            "access": "private",
            "tagname": ""
        },
        "gdjs.SpriteAnimationFrame": {
            "name": "gdjs.SpriteAnimationFrame",
            "shortname": "gdjs.SpriteAnimationFrame",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "gdjs",
            "file": "..\\Runtime\\spriteruntimeobject.js",
            "line": 7,
            "description": "A frame used by a SpriteAnimation in a SpriteRuntimeObject.\n\nIt contains the texture displayed as well as information like the points position\nor the collision mask.",
            "is_constructor": 1
        },
        "gdjs.SpriteAnimation": {
            "name": "gdjs.SpriteAnimation",
            "shortname": "gdjs.SpriteAnimation",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "gdjs",
            "file": "..\\Runtime\\spriteruntimeobject.js",
            "line": 96,
            "description": "Represents an animation of a SpriteRuntimeObject.",
            "is_constructor": 1
        },
        "gdjs.SpriteRuntimeObject": {
            "name": "gdjs.SpriteRuntimeObject",
            "shortname": "gdjs.SpriteRuntimeObject",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "gdjs",
            "file": "..\\Runtime\\spriteruntimeobject.js",
            "line": 141,
            "description": "The SpriteRuntimeObject represents an object that can display images.\n\n<b>TODO:</b> custom collisions masks.",
            "extends": "runtimeObject"
        },
        "gdjs.evtTools.storage": {
            "name": "gdjs.evtTools.storage",
            "shortname": "gdjs.evtTools.storage",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "gdjs.evtTools",
            "file": "..\\Runtime\\storagetools.js",
            "line": 7,
            "description": "Tools related to storage, for events generated code.",
            "static": 1,
            "access": "private",
            "tagname": ""
        },
        "gdjs.evtTools.string": {
            "name": "gdjs.evtTools.string",
            "shortname": "gdjs.evtTools.string",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "gdjs.evtTools",
            "file": "..\\Runtime\\stringtools.js",
            "line": 7,
            "description": "Tools related to strings manipulation, for events generated code.",
            "static": 1,
            "access": "private",
            "tagname": ""
        },
        "gdjs.Timer": {
            "name": "gdjs.Timer",
            "shortname": "gdjs.Timer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "gdjs",
            "file": "..\\Runtime\\timer.js",
            "line": 7,
            "description": "Represents a timer which must be updated manually.",
            "is_constructor": 1
        },
        "gdjs.Variable": {
            "name": "gdjs.Variable",
            "shortname": "gdjs.Variable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "gdjs",
            "file": "..\\Runtime\\variable.js",
            "line": 7,
            "description": "A Variable is an object storing a value (number or a string) or children variables.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "varData",
                    "description": "optional object used to initialize the variable."
                }
            ]
        },
        "gdjs.VariablesContainer": {
            "name": "gdjs.VariablesContainer",
            "shortname": "gdjs.VariablesContainer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "gdjs",
            "file": "..\\Runtime\\variablescontainer.js",
            "line": 7,
            "description": "VariablesContainer stores variables, usually for a a RuntimeGame, a RuntimeScene\nor a RuntimeObject.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "initialVariablesData",
                    "description": "Optional object containing initial variables."
                }
            ]
        },
        "gdjs.evtTools.window": {
            "name": "gdjs.evtTools.window",
            "shortname": "gdjs.evtTools.window",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "gdjs.evtTools",
            "file": "..\\Runtime\\windowtools.js",
            "line": 7,
            "description": "Tools related to runtime scene, for events generated code.",
            "static": 1,
            "access": "private",
            "tagname": ""
        }
    },
    "classitems": [
        {
            "file": "..\\Runtime\\commontools.js",
            "line": 15,
            "description": "Get the value of a variable. Equivalent of variable.getAsNumber().",
            "itemtype": "method",
            "name": "getVariableValue",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "gdjs.evtTools.common",
            "namespace": "gdjs.evtTools"
        },
        {
            "file": "..\\Runtime\\commontools.js",
            "line": 25,
            "description": "Get the string of a variable. Equivalent of variable.getAsString().",
            "itemtype": "method",
            "name": "getVariableValue",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "gdjs.evtTools.common",
            "namespace": "gdjs.evtTools"
        },
        {
            "file": "..\\Runtime\\commontools.js",
            "line": 35,
            "itemtype": "method",
            "name": "sceneVariableExists",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "gdjs.evtTools.common",
            "namespace": "gdjs.evtTools"
        },
        {
            "file": "..\\Runtime\\commontools.js",
            "line": 44,
            "itemtype": "method",
            "name": "globalVariableExists",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "gdjs.evtTools.common",
            "namespace": "gdjs.evtTools"
        },
        {
            "file": "..\\Runtime\\commontools.js",
            "line": 53,
            "itemtype": "method",
            "name": "variableChildExists",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "gdjs.evtTools.common",
            "namespace": "gdjs.evtTools"
        },
        {
            "file": "..\\Runtime\\commontools.js",
            "line": 62,
            "itemtype": "method",
            "name": "variableRemoveChild",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "gdjs.evtTools.common",
            "namespace": "gdjs.evtTools"
        },
        {
            "file": "..\\Runtime\\commontools.js",
            "line": 71,
            "description": "Convert a string to a float.",
            "itemtype": "method",
            "name": "toNumber",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "gdjs.evtTools.common",
            "namespace": "gdjs.evtTools"
        },
        {
            "file": "..\\Runtime\\commontools.js",
            "line": 81,
            "description": "Convert a number to a string.",
            "itemtype": "method",
            "name": "toString",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "gdjs.evtTools.common",
            "namespace": "gdjs.evtTools"
        },
        {
            "file": "..\\Runtime\\commontools.js",
            "line": 91,
            "description": "Always return false.",
            "itemtype": "method",
            "name": "returnFalse",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "gdjs.evtTools.common",
            "namespace": "gdjs.evtTools"
        },
        {
            "file": "..\\Runtime\\eventscontext.js",
            "line": 24,
            "description": "To be called when events begin so that \"Trigger once\" conditions\nare properly handled.",
            "itemtype": "method",
            "name": "startNewFrame",
            "class": "gdjs.EventsContext",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\eventscontext.js",
            "line": 39,
            "description": "Used by \"Trigger once\" conditions: Return true only if\nthis method was not called with the same identifier during the last frame.",
            "params": [
                {
                    "name": "triggerId",
                    "description": "The identifier of the \"Trigger once\" condition."
                }
            ],
            "itemtype": "method",
            "name": "triggerOnce",
            "class": "gdjs.EventsContext",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\eventscontext.js",
            "line": 59,
            "description": "Clear the map containing objects lists.",
            "itemtype": "method",
            "name": "clearEventsObjectsMap",
            "class": "gdjs.EventsContext",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\eventscontext.js",
            "line": 68,
            "description": "Add an objects list to the objects lists map.",
            "itemtype": "method",
            "name": "addObjectsToEventsMap",
            "class": "gdjs.EventsContext",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\eventscontext.js",
            "line": 77,
            "description": "Return the objects lists map.",
            "itemtype": "method",
            "name": "getEventsObjectsMap",
            "class": "gdjs.EventsContext",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\force.js",
            "line": 27,
            "description": "Returns the X component of the force.",
            "itemtype": "method",
            "name": "getX",
            "class": "gdjs.Force",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\force.js",
            "line": 35,
            "description": "Returns the Y component of the force.",
            "itemtype": "method",
            "name": "getY",
            "class": "gdjs.Force",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\force.js",
            "line": 43,
            "description": "Set the x component of the force.",
            "itemtype": "method",
            "name": "setX",
            "params": [
                {
                    "name": "x",
                    "description": "The new X component",
                    "type": "Number"
                }
            ],
            "class": "gdjs.Force",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\force.js",
            "line": 53,
            "description": "Set the y component of the force.",
            "itemtype": "method",
            "name": "setY",
            "params": [
                {
                    "name": "y",
                    "description": "The new Y component",
                    "type": "Number"
                }
            ],
            "class": "gdjs.Force",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\force.js",
            "line": 63,
            "description": "Set the angle of the force.",
            "itemtype": "method",
            "name": "setAngle",
            "params": [
                {
                    "name": "angle",
                    "description": "The new angle",
                    "type": "Number"
                }
            ],
            "class": "gdjs.Force",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\force.js",
            "line": 80,
            "description": "Set the length of the force.",
            "itemtype": "method",
            "name": "setLength",
            "params": [
                {
                    "name": "len",
                    "description": "The length",
                    "type": "Number"
                }
            ],
            "class": "gdjs.Force",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\force.js",
            "line": 97,
            "description": "Get the angle of the force",
            "itemtype": "method",
            "name": "getAngle",
            "class": "gdjs.Force",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\force.js",
            "line": 113,
            "description": "Get the length of the force",
            "itemtype": "method",
            "name": "getLength",
            "class": "gdjs.Force",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\force.js",
            "line": 128,
            "description": "Return true if the force is temporary, false if it is permanent.",
            "itemtype": "method",
            "name": "isTemporary",
            "class": "gdjs.Force",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\force.js",
            "line": 136,
            "description": "Set if the force is temporary or not.",
            "itemtype": "method",
            "name": "setTemporary",
            "params": [
                {
                    "name": "enable",
                    "description": "true if the force must be temporary",
                    "type": "Boolean"
                }
            ],
            "class": "gdjs.Force",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\gd.js",
            "line": 7,
            "class": "gdjs.ImageManager",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\gd.js",
            "line": 19,
            "description": "Convert a rgb color value to a hex value.",
            "note": "No \"#\" or \"0x\" are added.",
            "static": 1,
            "class": "gdjs.ImageManager",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\gd.js",
            "line": 28,
            "description": "Get a random integer between 0 and max.",
            "itemtype": "method",
            "name": "random",
            "static": 1,
            "class": "gdjs.ImageManager",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\gd.js",
            "line": 38,
            "description": "Convert an angle in degrees to radians.",
            "itemtype": "method",
            "name": "toRad",
            "static": 1,
            "class": "gdjs.ImageManager",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\gd.js",
            "line": 47,
            "description": "Convert an angle in radians to degrees.",
            "itemtype": "method",
            "name": "toDegrees",
            "static": 1,
            "class": "gdjs.ImageManager",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\gd.js",
            "line": 56,
            "description": "Get the height of the document ( or of the viewport ) displayed in browser",
            "itemtype": "method",
            "name": "getDocHeight",
            "static": 1,
            "class": "gdjs.ImageManager",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\gd.js",
            "line": 71,
            "description": "Get the width of the document ( or of the viewport ) displayed in browser",
            "itemtype": "method",
            "name": "getDocWidth",
            "static": 1,
            "class": "gdjs.ImageManager",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\gd.js",
            "line": 85,
            "description": "Iterate over an array: func is called on each member of the array.<br>\n<br>\nNote that func must not remove elements from the array. If func\nreturn false, the iteration will stop.",
            "itemtype": "method",
            "name": "iterateOverArray",
            "static": 1,
            "class": "gdjs.ImageManager",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\gd.js",
            "line": 104,
            "description": "Register the runtime objects that can be used in runtimeScene.<br>\nObjects must be part of gdjs and have their property \"thisIsARuntimeObjectConstructor\"\ndefined and set to the name of the type of the object so as to be recognized.\nThe name of the type of the object must be complete, with the namespace if any. For\nexample, if you are providing a Text object in the TextObject extension, the full name\nof the type of the object is \"TextObject::Text\".",
            "itemtype": "method",
            "name": "registerObjects",
            "static": 1,
            "class": "gdjs.ImageManager",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\gd.js",
            "line": 125,
            "description": "Register the runtime automatisms that can be used bt runtimeObject.<br>\nAutomatisms must be part of gdjs and have their property \"thisIsARuntimeAutomatismConstructor\"\ndefined and set to the name of the type of the automatism so as to be recognized.\nThe name of the type of the automatism must be complete, with the namespace if any. For\nexample, if you are providing a Draggable automatism in the DraggableAutomatism extension,\nthe full name of the type of the automatism is \"DraggableAutomatism::Draggable\".",
            "itemtype": "method",
            "name": "registerAutomatisms",
            "static": 1,
            "class": "gdjs.ImageManager",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\gd.js",
            "line": 146,
            "description": "Register the callbacks that will be called when a runtimeScene is loaded/unloaded or\nwhen an object is deleted from a scene.<br>\nCallbacks must be called respectively gdjsCallbackRuntimeSceneLoaded, gdjsCallbackRuntimeSceneUnloaded\nor gdjsCallbackObjectDeletedFromScene and be part of a (nested) child object of gdjs.<br>\nArguments passed to the function are the runtimeScene and the object if applicable.",
            "itemtype": "method",
            "name": "registerGlobalCallbacks",
            "static": 1,
            "class": "gdjs.ImageManager",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\gd.js",
            "line": 186,
            "description": "Get the constructor of an object.",
            "itemtype": "method",
            "name": "getObjectConstructor",
            "static": 1,
            "params": [
                {
                    "name": "name",
                    "description": "The name of the type of the object.",
                    "type": "String"
                }
            ],
            "class": "gdjs.ImageManager",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\gd.js",
            "line": 201,
            "description": "Get the constructor of an automatism.",
            "itemtype": "method",
            "name": "getAutomatismConstructor",
            "static": 1,
            "params": [
                {
                    "name": "name",
                    "description": "The name of the type of the automatism.",
                    "type": "String"
                }
            ],
            "class": "gdjs.ImageManager",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\imagemanager.js",
            "line": 22,
            "description": "Return the PIXI texture associated to the specified name.\nReturns a placeholder texture if not found.",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the texture to get."
                }
            ],
            "itemtype": "method",
            "name": "getPIXITexture",
            "class": "gdjs.ImageManager",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\imagemanager.js",
            "line": 67,
            "description": "Return a PIXI texture which can be used as a placeholder when no\nsuitable texture can be found.",
            "itemtype": "method",
            "name": "getInvalidPIXITexture",
            "class": "gdjs.ImageManager",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\inputtools.js",
            "line": 20,
            "description": "Return true if the specified key is pressed\nTODO: Map all keys and uses a hash table.",
            "itemtype": "method",
            "name": "isKeyPressed",
            "access": "private",
            "tagname": "",
            "class": "gdjs.evtTools.input",
            "namespace": "gdjs.evtTools"
        },
        {
            "file": "..\\Runtime\\layer.js",
            "line": 37,
            "description": "Update the position of the PIXI container. To be called after each change\nmade to position, zoom or rotation of the camera.",
            "access": "private",
            "tagname": "",
            "class": "gdjs.Layer",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\layer.js",
            "line": 57,
            "description": "Get the name of the layer",
            "itemtype": "method",
            "name": "getName",
            "return": {
                "description": "The name of the layer",
                "type": "String"
            },
            "class": "gdjs.Layer",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\layer.js",
            "line": 66,
            "description": "Add a child to the pixi container associated to the layer.<br>\nAll objects which are on this layer must be children of this container.<br>",
            "itemtype": "method",
            "name": "addChildToPIXIContainer",
            "params": [
                {
                    "name": "child",
                    "description": "The child ( PIXI object ) to be added."
                },
                {
                    "name": "zOrder",
                    "description": "The z order of the associated object."
                }
            ],
            "class": "gdjs.Layer",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\layer.js",
            "line": 86,
            "description": "Change the z order of a child associated to an object.",
            "itemtype": "method",
            "name": "changePIXIContainerChildZOrder",
            "params": [
                {
                    "name": "child",
                    "description": "The child ( PIXI object ) to be modified."
                },
                {
                    "name": "newZOrder",
                    "description": "The z order of the associated object."
                }
            ],
            "class": "gdjs.Layer",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\layer.js",
            "line": 98,
            "description": "Remove a child from the internal pixi container.<br>\nShould be called when an object is deleted or removed from the layer.",
            "itemtype": "method",
            "name": "removePIXIContainerChild",
            "params": [
                {
                    "name": "child",
                    "description": "The child ( PIXI object ) to be removed."
                }
            ],
            "class": "gdjs.Layer",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\layer.js",
            "line": 109,
            "description": "Change the camera center X position.<br>",
            "itemtype": "method",
            "name": "getCameraX",
            "params": [
                {
                    "name": "cameraId",
                    "description": "The camera number. Currently ignored."
                }
            ],
            "return": {
                "description": "The x position of the camera"
            },
            "class": "gdjs.Layer",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\layer.js",
            "line": 120,
            "description": "Change the camera center Y position.<br>",
            "itemtype": "method",
            "name": "getCameraY",
            "params": [
                {
                    "name": "cameraId",
                    "description": "The camera number. Currently ignored."
                }
            ],
            "return": {
                "description": "The y position of the camera"
            },
            "class": "gdjs.Layer",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\layer.js",
            "line": 131,
            "description": "Set the camera center X position.<br>",
            "itemtype": "method",
            "name": "setCameraX",
            "params": [
                {
                    "name": "x",
                    "description": "The new x position",
                    "type": "Number"
                },
                {
                    "name": "cameraId",
                    "description": "The camera number. Currently ignored."
                }
            ],
            "class": "gdjs.Layer",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\layer.js",
            "line": 143,
            "description": "Set the camera center Y position.<br>",
            "itemtype": "method",
            "name": "setCameraY",
            "params": [
                {
                    "name": "y",
                    "description": "The new y position",
                    "type": "Number"
                },
                {
                    "name": "cameraId",
                    "description": "The camera number. Currently ignored."
                }
            ],
            "class": "gdjs.Layer",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\layer.js",
            "line": 168,
            "description": "Check if the layer is visible.<br>",
            "itemtype": "method",
            "name": "isVisible",
            "return": {
                "description": "true if the layer is visible."
            },
            "class": "gdjs.Layer",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\layer.js",
            "line": 178,
            "description": "Set the zoom of a camera.<br>",
            "itemtype": "method",
            "name": "setCameraZoom",
            "params": [
                {
                    "name": "The",
                    "description": "new zoom. Must be superior to 0. 1 is the default zoom."
                },
                {
                    "name": "cameraId",
                    "description": "The camera number. Currently ignored."
                }
            ],
            "class": "gdjs.Layer",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\layer.js",
            "line": 191,
            "description": "Get the zoom of a camera.<br>",
            "itemtype": "method",
            "name": "getZoom",
            "params": [
                {
                    "name": "cameraId",
                    "description": "The camera number. Currently ignored."
                }
            ],
            "return": {
                "description": "The zoom."
            },
            "class": "gdjs.Layer",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\layer.js",
            "line": 202,
            "description": "Get the rotation of the camera, expressed in degrees.<br>",
            "itemtype": "method",
            "name": "getCameraRotation",
            "params": [
                {
                    "name": "cameraId",
                    "description": "The camera number. Currently ignored."
                }
            ],
            "return": {
                "description": "The rotation, in degrees."
            },
            "class": "gdjs.Layer",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\layer.js",
            "line": 213,
            "description": "Set the rotation of the camera, expressed in degrees.<br>\nThe rotation is made around the camera center.",
            "itemtype": "method",
            "name": "setCameraRotation",
            "params": [
                {
                    "name": "rotation",
                    "description": "The new rotation, in degrees.",
                    "type": "Number"
                },
                {
                    "name": "cameraId",
                    "description": "The camera number. Currently ignored."
                }
            ],
            "class": "gdjs.Layer",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\layer.js",
            "line": 226,
            "description": "Convert a point from the canvas coordinates (For example, the mouse position) to the\n\"world\" coordinates.",
            "itemtype": "method",
            "name": "convertCoords",
            "params": [
                {
                    "name": "x",
                    "description": "The x position, in canvas coordinates.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y position, in canvas coordinates.",
                    "type": "Number"
                },
                {
                    "name": "cameraId",
                    "description": "The camera number. Currently ignored."
                }
            ],
            "class": "gdjs.Layer",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\objecttools.js",
            "line": 16,
            "description": "Do a test on two tables of objects so as to pick only the pair of objects for which the test is true.\nIf inverted == true, only the objects of the first table are filtered.\n\nNote that the func method is not called stricly for each pair: When considering a pair of objects, if \nthese objects have already been marked as picked, the func method won't be called again.\n\nCost (Worst case, func being always false):\n   Cost(Setting property 'picked' of NbObjList1+NbObjList2 objects to false)\n + Cost(functor)*NbObjList1*NbObjList2\n + Cost(Testing NbObjList1+NbObjList2 booleans)\n + Cost(Removing NbObjList1+NbObjList2 objects from all the lists)\n\nCost (Best case, func being always true):\n   Cost(Setting property 'picked' of NbObjList1+NbObjList2 objects to false)\n + Cost(functor)*(NbObjList1+NbObjList2)\n + Cost(Testing NbObjList1+NbObjList2 booleans)",
            "itemtype": "method",
            "name": "TwoListsTest",
            "class": "gdjs.evtTools.object",
            "namespace": "gdjs.evtTools"
        },
        {
            "file": "..\\Runtime\\objecttools.js",
            "line": 291,
            "description": "Do the work of creating a new object",
            "access": "private",
            "tagname": "",
            "class": "gdjs.evtTools.object",
            "namespace": "gdjs.evtTools"
        },
        {
            "file": "..\\Runtime\\objecttools.js",
            "line": 312,
            "description": "Allows events to create a new object on a scene.",
            "access": "private",
            "tagname": "",
            "class": "gdjs.evtTools.object",
            "namespace": "gdjs.evtTools"
        },
        {
            "file": "..\\Runtime\\objecttools.js",
            "line": 320,
            "description": "Allows events to create a new object on a scene.",
            "access": "private",
            "tagname": "",
            "class": "gdjs.evtTools.object",
            "namespace": "gdjs.evtTools"
        },
        {
            "file": "..\\Runtime\\objecttools.js",
            "line": 328,
            "description": "Allows events to get the number of objects picked.",
            "access": "private",
            "tagname": "",
            "class": "gdjs.evtTools.object",
            "namespace": "gdjs.evtTools"
        },
        {
            "file": "..\\Runtime\\polygon.js",
            "line": 16,
            "description": "The vertices of the polygon",
            "itemtype": "property",
            "name": "vertices",
            "class": "gdjs.Polygon",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\polygon.js",
            "line": 22,
            "description": "The edges of the polygon. This property is only valid after calling\ncomputeEdges, and remains valid until vertices are modified.",
            "itemtype": "property",
            "name": "edges",
            "class": "gdjs.Polygon",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\polygon.js",
            "line": 29,
            "description": "The center of the polygon. This property is only valid after calling\ncomputeCenter, and remains valid until vertices are modified.",
            "itemtype": "property",
            "name": "center",
            "class": "gdjs.Polygon",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\polygon.js",
            "line": 121,
            "description": "Do a collision test between two polygons.<br>\nPlease note that polygons must <b>convexes</b>!\n\nUses <a href=\"http://en.wikipedia.org/wiki/Hyperplane_separation_theorem\">Separating Axis Theorem </a>.<br>\nBased on <a href=\"http://www.codeproject.com/Articles/15573/2D-Polygon-Collision-Detection\">this</a>\nand <a href=\"http://stackoverflow.com/questions/5742329/problem-with-collision-response-sat\">this</a> article.",
            "itemtype": "method",
            "name": "collisionTest",
            "static": 1,
            "return": {
                "description": "true if polygons are overlapping",
                "type": "Boolean"
            },
            "params": [
                {
                    "name": "p1",
                    "description": "The first polygon",
                    "type": "Polygon"
                },
                {
                    "name": "p2",
                    "description": "The second polygon",
                    "type": "Polygon"
                }
            ],
            "class": "gdjs.Polygon",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimeautomatism.js",
            "line": 24,
            "description": "Get the name of the automatism.",
            "itemtype": "method",
            "name": "getName",
            "return": {
                "description": "The automatism's name.",
                "type": "String"
            },
            "class": "gdjs.RuntimeAutomatism",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimeautomatism.js",
            "line": 33,
            "description": "Get the name identifier of the automatism.",
            "itemtype": "method",
            "name": "getNameId",
            "return": {
                "description": "The automatism's name identifier.",
                "type": "Number"
            },
            "class": "gdjs.RuntimeAutomatism",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimeautomatism.js",
            "line": 42,
            "description": "Called at each frame before events. Call doStepPreEvents.<br>\nAutomatisms writers: Please do not redefine this method. Redefine doStepPreEvents instead.",
            "itemtype": "method",
            "name": "stepPreEvents",
            "params": [
                {
                    "name": "runtimeScene",
                    "description": "The runtimeScene owning the object"
                }
            ],
            "class": "gdjs.RuntimeAutomatism",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimeautomatism.js",
            "line": 52,
            "description": "Called at each frame after events. Call doStepPostEvents.<br>\nAutomatisms writers: Please do not redefine this method. Redefine doStepPreEvents instead.",
            "itemtype": "method",
            "name": "stepPostEvents",
            "params": [
                {
                    "name": "runtimeScene",
                    "description": "The runtimeScene owning the object"
                }
            ],
            "class": "gdjs.RuntimeAutomatism",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimeautomatism.js",
            "line": 62,
            "description": "De/Activate the automatism",
            "itemtype": "method",
            "name": "activate",
            "class": "gdjs.RuntimeAutomatism",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimeautomatism.js",
            "line": 78,
            "description": "Return true if the automatism is activated",
            "itemtype": "method",
            "name": "activated",
            "class": "gdjs.RuntimeAutomatism",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimeautomatism.js",
            "line": 86,
            "description": "Automatisms writers: Reimplement this method to do extra work\nwhen the automatism is activated",
            "itemtype": "method",
            "name": "onActivate",
            "class": "gdjs.RuntimeAutomatism",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimeautomatism.js",
            "line": 95,
            "description": "Automatisms writers: Reimplement this method to do extra work\nwhen the automatism is deactivated",
            "itemtype": "method",
            "name": "onDeActivate",
            "class": "gdjs.RuntimeAutomatism",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimeautomatism.js",
            "line": 104,
            "description": "Automatisms writers: This method is called each tick before events are done.",
            "itemtype": "method",
            "name": "doStepPreEvents",
            "params": [
                {
                    "name": "runtimeScene",
                    "description": "The runtimeScene owning the object"
                }
            ],
            "class": "gdjs.RuntimeAutomatism",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimeautomatism.js",
            "line": 113,
            "description": "Automatisms writers: This method is called each tick after events are done.",
            "itemtype": "method",
            "name": "doStepPostEvents",
            "params": [
                {
                    "name": "runtimeScene",
                    "description": "The runtimeScene owning the object"
                }
            ],
            "class": "gdjs.RuntimeAutomatism",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimeautomatism.js",
            "line": 122,
            "description": "Automatisms writers: This method is called when the owner of the automatism\nis removed from its scene.",
            "itemtype": "method",
            "name": "ownerRemovedFromScene",
            "class": "gdjs.RuntimeAutomatism",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimegame.js",
            "line": 66,
            "description": "Get the variables of the runtimeGame.",
            "itemtype": "method",
            "name": "getVariables",
            "return": {
                "description": "a variablesContainer object."
            },
            "class": "gdjs.RuntimeGame",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimegame.js",
            "line": 79,
            "description": "Get the object containing the game data",
            "itemtype": "method",
            "name": "getGameData",
            "return": {
                "description": "The object associated to the game."
            },
            "class": "gdjs.RuntimeGame",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimegame.js",
            "line": 88,
            "description": "Get the data associated to a scene.",
            "itemtype": "method",
            "name": "getSceneData",
            "params": [
                {
                    "name": "sceneName",
                    "description": "The name of the scene. If not defined, the first scene will be returned."
                }
            ],
            "return": {
                "description": "The data associated to the scene."
            },
            "class": "gdjs.RuntimeGame",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimegame.js",
            "line": 110,
            "description": "Check if a scene exists",
            "itemtype": "method",
            "name": "hasScene",
            "params": [
                {
                    "name": "sceneName",
                    "description": "The name of the scene to search."
                }
            ],
            "return": {
                "description": "true if the scene exists. If sceneName is undefined, true if the game has a scene."
            },
            "class": "gdjs.RuntimeGame",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimegame.js",
            "line": 129,
            "description": "Get the data associated to an external layout.",
            "itemtype": "method",
            "name": "getExternalLayoutData",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the external layout."
                }
            ],
            "return": {
                "description": "The data associated to the external layout or null if not found."
            },
            "class": "gdjs.RuntimeGame",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimegame.js",
            "line": 148,
            "description": "Get the data representing all the global objects of the game.",
            "itemtype": "method",
            "name": "getInitialObjectsData",
            "return": {
                "description": "The data associated to the global objects."
            },
            "class": "gdjs.RuntimeGame",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimegame.js",
            "line": 157,
            "description": "Should be called whenever a key is pressed",
            "itemtype": "method",
            "name": "onKeyPressed",
            "params": [
                {
                    "name": "keyCode",
                    "description": "The key code associated to the key press.",
                    "type": "Number"
                }
            ],
            "class": "gdjs.RuntimeGame",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimegame.js",
            "line": 166,
            "description": "Should be called whenever a key is released",
            "itemtype": "method",
            "name": "onKeyReleased",
            "params": [
                {
                    "name": "keyCode",
                    "description": "The key code associated to the key release.",
                    "type": "Number"
                }
            ],
            "class": "gdjs.RuntimeGame",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimegame.js",
            "line": 175,
            "description": "Return true if the key corresponding to keyCode is pressed.",
            "itemtype": "method",
            "name": "isKeyPressed",
            "params": [
                {
                    "name": "keyCode",
                    "description": "The key code to be tested.",
                    "type": "Number"
                }
            ],
            "class": "gdjs.RuntimeGame",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimegame.js",
            "line": 184,
            "description": "Return true if any key is pressed",
            "itemtype": "method",
            "name": "anyKeyPressed",
            "class": "gdjs.RuntimeGame",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimegame.js",
            "line": 200,
            "description": "Should be called when the mouse is moved.<br>\nPlease note that the coordinates must be expressed relative to the view position.",
            "itemtype": "method",
            "name": "onMouseMove",
            "params": [
                {
                    "name": "x",
                    "description": "The mouse new X position",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The mouse new Y position",
                    "type": "Number"
                }
            ],
            "class": "gdjs.RuntimeGame",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimegame.js",
            "line": 213,
            "description": "Get the mouse X position",
            "itemtype": "method",
            "name": "getMouseX",
            "return": {
                "description": "the mouse X position, relative to the game view."
            },
            "class": "gdjs.RuntimeGame",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimegame.js",
            "line": 223,
            "description": "Get the mouse Y position",
            "itemtype": "method",
            "name": "getMouseY",
            "return": {
                "description": "the mouse Y position, relative to the game view."
            },
            "class": "gdjs.RuntimeGame",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimegame.js",
            "line": 241,
            "description": "Change the default width of the game: It won't affect the canvas size, but\nnew scene cameras will be created with this size.",
            "itemtype": "method",
            "name": "setDefaultWidth",
            "params": [
                {
                    "name": "width",
                    "description": "The new default width",
                    "type": "Number"
                }
            ],
            "class": "gdjs.RuntimeGame",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimegame.js",
            "line": 251,
            "description": "Change the default height of the game: It won't affect the canvas size, but\nnew scene cameras will be created with this size.",
            "itemtype": "method",
            "name": "setDefaultHeight",
            "params": [
                {
                    "name": "height",
                    "description": "The new default height",
                    "type": "Number"
                }
            ],
            "class": "gdjs.RuntimeGame",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimegame.js",
            "line": 261,
            "description": "Change the size of the canvas displaying the game.\nNote that if the canvas is fullscreen, it won't be resized, but when going back to\nnon fullscreen mode, the requested size will be used.",
            "itemtype": "method",
            "name": "setCanvasSize",
            "params": [
                {
                    "name": "width",
                    "description": "The new width",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "The new height",
                    "type": "Number"
                }
            ],
            "class": "gdjs.RuntimeGame",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimegame.js",
            "line": 279,
            "description": "Should be called whenever a mouse button is pressed",
            "itemtype": "method",
            "name": "onMouseButtonPressed",
            "params": [
                {
                    "name": "buttonCode",
                    "description": "The mouse button code associated to the event.<br>0: Left button<br>1: Right button",
                    "type": "Number"
                }
            ],
            "class": "gdjs.RuntimeGame",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimegame.js",
            "line": 288,
            "description": "Should be called whenever a mouse button is released",
            "itemtype": "method",
            "name": "onMouseButtonReleased",
            "params": [
                {
                    "name": "buttonCode",
                    "description": "The mouse button code associated to the event. ( See onMouseButtonPressed )",
                    "type": "Number"
                }
            ],
            "class": "gdjs.RuntimeGame",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimegame.js",
            "line": 297,
            "description": "Return true if the mouse button corresponding to buttonCode is pressed.",
            "itemtype": "method",
            "name": "isMouseButtonPressed",
            "params": [
                {
                    "name": "buttonCode",
                    "description": "The mouse button code.<br>0: Left button<br>1: Right button",
                    "type": "Number"
                }
            ],
            "class": "gdjs.RuntimeGame",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimegame.js",
            "line": 306,
            "description": "Should be called whenever the mouse wheel is used",
            "itemtype": "method",
            "name": "onMouseWheel",
            "params": [
                {
                    "name": "wheelDelta",
                    "description": "The mouse wheel delta",
                    "type": "Number"
                }
            ],
            "class": "gdjs.RuntimeGame",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimegame.js",
            "line": 315,
            "description": "Return the mouse wheel delta",
            "itemtype": "method",
            "name": "getMouseWheelDelta",
            "class": "gdjs.RuntimeGame",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimegame.js",
            "line": 323,
            "description": "Return the minimal fps that must be guaranteed by the game.\n( Otherwise, game is slowed down ).",
            "itemtype": "method",
            "name": "getMinimalFramerate",
            "class": "gdjs.RuntimeGame",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimegame.js",
            "line": 332,
            "description": "Add the standard events handler.\nBe sure that the game has a renderer (See createStandardRenderer).",
            "itemtype": "method",
            "name": "bindStandardEvents",
            "class": "gdjs.RuntimeGame",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimegame.js",
            "line": 493,
            "description": "Set if the aspect ratio must be kept when the game canvas is resized.",
            "class": "gdjs.RuntimeGame",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimegame.js",
            "line": 504,
            "description": "Change the margin that must be preserved around the game canvas.",
            "class": "gdjs.RuntimeGame",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimegame.js",
            "line": 520,
            "description": "De/activate fullscreen for the canvas rendering the game.",
            "itemtype": "method",
            "name": "setFullScreen",
            "class": "gdjs.RuntimeGame",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimegame.js",
            "line": 553,
            "description": "Create a standard canvas inside canvasArea.\nThe game keep a reference to this canvas and will renderer in it.",
            "itemtype": "method",
            "name": "createStandardCanvas",
            "class": "gdjs.RuntimeGame",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimegame.js",
            "line": 580,
            "description": "Resize the canvas, according to _isFullscreen, _forceFullscreen, _currentWidth,\n_currentHeight, _marginTop, _marginLeft, _marginRight, _marginBottom, _keepRatio.\n\nIf fullscreen is activated",
            "itemtype": "method",
            "name": "_resizeCanvas",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "gdjs.RuntimeGame",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimegame.js",
            "line": 627,
            "description": "Load all assets, displaying progress in renderer.",
            "itemtype": "method",
            "name": "loadAllAssets",
            "class": "gdjs.RuntimeGame",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimegame.js",
            "line": 668,
            "description": "Launch the game, displayed in the renderer associated to the game (see createStandardCanvas).<br>\nThe method returns when the game is closed.",
            "itemtype": "method",
            "name": "startStandardGameLoop",
            "class": "gdjs.RuntimeGame",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimeobject.js",
            "line": 98,
            "description": "Called each time the scene is rendered.",
            "itemtype": "method",
            "name": "updateTime",
            "params": [
                {
                    "name": "elapsedTime",
                    "description": "The time elapsedTime since the last frame, in <b>seconds</b>.",
                    "type": "Number"
                }
            ],
            "class": "gdjs.RuntimeObject",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimeobject.js",
            "line": 108,
            "description": "Called when the object is created from an initial instance at the startup of the scene.<br>\nNote this.common properties ( position, angle, z order... ) have already been setup.",
            "itemtype": "method",
            "name": "extraInitializationFromInitialInstance",
            "params": [
                {
                    "name": "initialInstanceData",
                    "description": "The data of the initial instance."
                }
            ],
            "class": "gdjs.RuntimeObject",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimeobject.js",
            "line": 119,
            "description": "Remove an object from a scene.<br>\nExtensions writers, do not change this method. Instead, redefine the onDeletedFromScene method.",
            "itemtype": "method",
            "name": "deleteFromScene",
            "params": [
                {
                    "name": "runtimeScene",
                    "description": "The RuntimeScene owning the object."
                }
            ],
            "class": "gdjs.RuntimeObject",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimeobject.js",
            "line": 132,
            "description": "Called when the object is removed from its scene.",
            "itemtype": "method",
            "name": "onDeletedFromScene",
            "params": [
                {
                    "name": "runtimeScene",
                    "description": "The RuntimeScene owning the object."
                }
            ],
            "class": "gdjs.RuntimeObject",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimeobject.js",
            "line": 143,
            "description": "Get the name of the object.",
            "itemtype": "method",
            "name": "getName",
            "return": {
                "description": "The object's name.",
                "type": "String"
            },
            "class": "gdjs.RuntimeObject",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimeobject.js",
            "line": 152,
            "description": "Get the name identifier of the object.",
            "itemtype": "method",
            "name": "getNameId",
            "return": {
                "description": "The object's name identifier.",
                "type": "Number"
            },
            "class": "gdjs.RuntimeObject",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimeobject.js",
            "line": 161,
            "description": "Get the unique identifier of the object.<br>\nThe identifier is set by the runtimeScene owning the object.<br>\nYou can also use the id property ( this._bject.id ) for increased efficiency instead of\ncalling this method.",
            "itemtype": "method",
            "name": "getUniqueId",
            "return": {
                "description": "The object identifier",
                "type": "Number"
            },
            "class": "gdjs.RuntimeObject",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimeobject.js",
            "line": 174,
            "description": "Set the position of the object.",
            "itemtype": "method",
            "name": "setPosition",
            "params": [
                {
                    "name": "x",
                    "description": "The new X position",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The new Y position",
                    "type": "Number"
                }
            ],
            "class": "gdjs.RuntimeObject",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimeobject.js",
            "line": 186,
            "description": "Set the X position of the object.",
            "itemtype": "method",
            "name": "setX",
            "params": [
                {
                    "name": "x",
                    "description": "The new X position",
                    "type": "Number"
                }
            ],
            "class": "gdjs.RuntimeObject",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimeobject.js",
            "line": 199,
            "description": "Get the X position of the object.",
            "itemtype": "method",
            "name": "getX",
            "return": {
                "description": "The X position of the object",
                "type": "Number"
            },
            "class": "gdjs.RuntimeObject",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimeobject.js",
            "line": 209,
            "description": "Set the Y position of the object.",
            "itemtype": "method",
            "name": "setY",
            "params": [
                {
                    "name": "y",
                    "description": "The new Y position",
                    "type": "Number"
                }
            ],
            "class": "gdjs.RuntimeObject",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimeobject.js",
            "line": 222,
            "description": "Get the Y position of the object.",
            "itemtype": "method",
            "name": "getY",
            "return": {
                "description": "The Y position of the object",
                "type": "Number"
            },
            "class": "gdjs.RuntimeObject",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimeobject.js",
            "line": 232,
            "description": "Get the X position of the rendered object.<br>\nFor most objects, this will returns the same value as getX(). But if the object\nhas an origin this.is not the same as the point (0,0) of the object displayed,\ngetDrawableX will differs.",
            "itemtype": "method",
            "name": "getDrawableX",
            "return": {
                "description": "The X position of the rendered object.",
                "type": "Number"
            },
            "class": "gdjs.RuntimeObject",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimeobject.js",
            "line": 245,
            "description": "Get the Y position of the rendered object.<br>\nFor most objects, this will returns the same value as getY(). But if the object\nhas an origin this.is not the same as the point (0,0) of the object displayed,\ngetDrawableY will differs.",
            "itemtype": "method",
            "name": "getDrawableY",
            "return": {
                "description": "The Y position of the rendered object.",
                "type": "Number"
            },
            "class": "gdjs.RuntimeObject",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimeobject.js",
            "line": 286,
            "description": "Set the Z order of the object.",
            "itemtype": "method",
            "name": "setZOrder",
            "params": [
                {
                    "name": "z",
                    "description": "The new Z order position of the object",
                    "type": "Number"
                }
            ],
            "class": "gdjs.RuntimeObject",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimeobject.js",
            "line": 296,
            "description": "Get the Z order of the object.",
            "itemtype": "method",
            "name": "getZOrder",
            "return": {
                "description": "The Z order of the object",
                "type": "Number"
            },
            "class": "gdjs.RuntimeObject",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimeobject.js",
            "line": 306,
            "description": "Set the angle of the object.",
            "itemtype": "method",
            "name": "setAngle",
            "params": [
                {
                    "name": "angle",
                    "description": "The new angle of the object",
                    "type": "Number"
                }
            ],
            "class": "gdjs.RuntimeObject",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimeobject.js",
            "line": 319,
            "description": "Get the rotation of the object.",
            "itemtype": "method",
            "name": "getAngle",
            "return": {
                "description": "The rotation of the object",
                "type": "Number"
            },
            "class": "gdjs.RuntimeObject",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimeobject.js",
            "line": 329,
            "description": "Set the layer of the object.",
            "itemtype": "method",
            "name": "setLayer",
            "return": {
                "description": "The new layer of the object",
                "type": "String"
            },
            "class": "gdjs.RuntimeObject",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimeobject.js",
            "line": 339,
            "description": "Get the layer of the object.",
            "itemtype": "method",
            "name": "getLayer",
            "return": {
                "description": "The layer of the object",
                "type": "String"
            },
            "class": "gdjs.RuntimeObject",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimeobject.js",
            "line": 349,
            "description": "Return true if the object is on the specified layer",
            "itemtype": "method",
            "name": "isOnLayer",
            "params": [
                {
                    "name": "layer",
                    "description": "The layer to be tested.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true if the object is on the specified layer",
                "type": "Boolean"
            },
            "class": "gdjs.RuntimeObject",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimeobject.js",
            "line": 360,
            "description": "Get the container of the object variables",
            "itemtype": "method",
            "name": "getVariables",
            "return": {
                "description": "The variables of the object",
                "type": "VariablesContainer"
            },
            "class": "gdjs.RuntimeObject",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimeobject.js",
            "line": 369,
            "description": "Get the value of a variable considered as a number. Equivalent of variable.getAsNumber()",
            "itemtype": "method",
            "name": "getVariableNumber",
            "params": [
                {
                    "name": "variable",
                    "description": "The variable to be accessed"
                }
            ],
            "return": {
                "description": "The value of the specified variable"
            },
            "static": 1,
            "class": "gdjs.RuntimeObject",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimeobject.js",
            "line": 381,
            "description": "Get the value of a variable considered as a string. Equivalent of variable.getAsString()",
            "itemtype": "method",
            "name": "getVariableString",
            "params": [
                {
                    "name": "variable",
                    "description": "The variable to be accessed"
                }
            ],
            "return": {
                "description": "The string of the specified variable"
            },
            "static": 1,
            "class": "gdjs.RuntimeObject",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimeobject.js",
            "line": 393,
            "description": "Shortcut to set the value of a variable considered as a number",
            "itemtype": "method",
            "name": "setVariableNumber",
            "params": [
                {
                    "name": "variable",
                    "description": "The variable to be changed"
                },
                {
                    "name": "newValue",
                    "description": "The value to be set",
                    "type": "Number"
                }
            ],
            "class": "gdjs.RuntimeObject",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimeobject.js",
            "line": 404,
            "description": "Shortcut to set the value of a variable considered as a string",
            "itemtype": "method",
            "name": "setVariableNumber",
            "params": [
                {
                    "name": "variable",
                    "description": "The variable to be changed"
                },
                {
                    "name": "newValue",
                    "description": "The value to be set",
                    "type": "String"
                }
            ],
            "class": "gdjs.RuntimeObject",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimeobject.js",
            "line": 415,
            "itemtype": "method",
            "name": "variableChildExists",
            "static": 1,
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "variable",
                    "description": "The variable to be tested"
                },
                {
                    "name": "childName",
                    "description": "The name of the child",
                    "type": "String"
                }
            ],
            "class": "gdjs.RuntimeObject",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimeobject.js",
            "line": 427,
            "itemtype": "method",
            "name": "variableRemoveChild",
            "static": 1,
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "variable",
                    "description": "The variable to be changed"
                },
                {
                    "name": "childName",
                    "description": "The name of the child",
                    "type": "String"
                }
            ],
            "class": "gdjs.RuntimeObject",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimeobject.js",
            "line": 439,
            "description": "Shortcut to test if a variable exists for the object.",
            "itemtype": "method",
            "name": "hasVariable",
            "params": [
                {
                    "name": "name",
                    "description": "The variable to be tested",
                    "type": "String"
                }
            ],
            "class": "gdjs.RuntimeObject",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimeobject.js",
            "line": 448,
            "description": "Hide or show the object",
            "itemtype": "method",
            "name": "hide",
            "params": [
                {
                    "name": "enable",
                    "description": "Set it to true to hide the object, false to show it.",
                    "type": "Boolean"
                }
            ],
            "class": "gdjs.RuntimeObject",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimeobject.js",
            "line": 457,
            "description": "Return true if the object is not hidden.",
            "itemtype": "method",
            "name": "isVisible",
            "return": {
                "description": "true if the object is not hidden.",
                "type": "Boolean"
            },
            "class": "gdjs.RuntimeObject",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimeobject.js",
            "line": 466,
            "description": "Return true if the object is hidden.",
            "itemtype": "method",
            "name": "isHidden",
            "return": {
                "description": "true if the object is hidden.",
                "type": "Boolean"
            },
            "class": "gdjs.RuntimeObject",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimeobject.js",
            "line": 475,
            "description": "Return the width of the object",
            "itemtype": "method",
            "name": "getWidth",
            "return": {
                "description": "The width of the object",
                "type": "Number"
            },
            "class": "gdjs.RuntimeObject",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimeobject.js",
            "line": 484,
            "description": "Return the width of the object",
            "itemtype": "method",
            "name": "getHeight",
            "return": {
                "description": "The height of the object",
                "type": "Number"
            },
            "class": "gdjs.RuntimeObject",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimeobject.js",
            "line": 493,
            "description": "Return the X position of the object center, relative to the object position.",
            "itemtype": "method",
            "name": "getCenterX",
            "class": "gdjs.RuntimeObject",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimeobject.js",
            "line": 501,
            "description": "Return the Y position of the object center, relative to the object position.",
            "itemtype": "method",
            "name": "getCenterY",
            "class": "gdjs.RuntimeObject",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimeobject.js",
            "line": 511,
            "description": "Get a force from the garbage, or create a new force is garbage is empty.<br>\nTo be used each time a force is created so as to avoid temporaries objects.",
            "itemtype": "method",
            "name": "getRecycledForce",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "x",
                    "description": "The x coordinates of the force",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y coordinates of the force",
                    "type": "Number"
                },
                {
                    "name": "isTemporary",
                    "description": "Set if the force is temporary or not.",
                    "type": "Boolean"
                }
            ],
            "class": "gdjs.RuntimeObject",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimeobject.js",
            "line": 533,
            "description": "Add a force to the object to make it moving.",
            "itemtype": "method",
            "name": "addForce",
            "params": [
                {
                    "name": "x",
                    "description": "The x coordinates of the force",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y coordinates of the force",
                    "type": "Number"
                },
                {
                    "name": "isPermanent",
                    "description": "Set if the force is permanent or not.",
                    "type": "Boolean"
                }
            ],
            "class": "gdjs.RuntimeObject",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimeobject.js",
            "line": 544,
            "description": "Add a force using polar coordinates.",
            "itemtype": "method",
            "name": "addPolarForce",
            "params": [
                {
                    "name": "angle",
                    "description": "The angle of the force",
                    "type": "Number"
                },
                {
                    "name": "len",
                    "description": "The length of the force",
                    "type": "Number"
                },
                {
                    "name": "isPermanent",
                    "description": "Set if the force is permanent or not.",
                    "type": "Boolean"
                }
            ],
            "class": "gdjs.RuntimeObject",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimeobject.js",
            "line": 558,
            "description": "Add a force oriented toward a position",
            "itemtype": "method",
            "name": "addForceTowardPosition",
            "params": [
                {
                    "name": "x",
                    "description": "The target x position",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The target y position",
                    "type": "Number"
                },
                {
                    "name": "len",
                    "description": "The force length, in pixels.",
                    "type": "Number"
                },
                {
                    "name": "isPermanent",
                    "description": "Set if the force is permanent or not.",
                    "type": "Boolean"
                }
            ],
            "class": "gdjs.RuntimeObject",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimeobject.js",
            "line": 576,
            "description": "Add a force oriented toward another object.<br>\n(Shortcut for addForceTowardPosition)",
            "itemtype": "method",
            "name": "addForceTowardObject",
            "params": [
                {
                    "name": "obj",
                    "description": "The target object"
                },
                {
                    "name": "len",
                    "description": "The force length, in pixels.",
                    "type": "Number"
                },
                {
                    "name": "isPermanent",
                    "description": "Set if the force is permanent or not.",
                    "type": "Boolean"
                }
            ],
            "class": "gdjs.RuntimeObject",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimeobject.js",
            "line": 592,
            "description": "Deletes all forces applied on the object",
            "itemtype": "method",
            "name": "clearForces",
            "class": "gdjs.RuntimeObject",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimeobject.js",
            "line": 601,
            "description": "Return true if no forces are applied on the object.",
            "itemtype": "method",
            "name": "hasNoForces",
            "return": {
                "description": "true if no forces are applied on the object.",
                "type": "Boolean"
            },
            "class": "gdjs.RuntimeObject",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimeobject.js",
            "line": 610,
            "description": "Called once a step by runtimeScene to remove temporary forces.",
            "itemtype": "method",
            "name": "updateForces",
            "class": "gdjs.RuntimeObject",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimeobject.js",
            "line": 628,
            "description": "Return a force which is the sum of all forces applied on the object.",
            "itemtype": "method",
            "name": "getAverageForce",
            "return": {
                "description": "A force object.",
                "type": "Force"
            },
            "class": "gdjs.RuntimeObject",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimeobject.js",
            "line": 647,
            "description": "Return true if the average angle of the forces applied on the object\nis in a given range.",
            "itemtype": "method",
            "name": "averageForceAngleIs",
            "params": [
                {
                    "name": "angle",
                    "description": "The angle to be tested.",
                    "type": "Number"
                },
                {
                    "name": "toleranceInDegrees",
                    "description": "The length of the range :",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "true if the difference between the average angle of the forces\nand the angle parameter is inferior to toleranceInDegrees parameter.",
                "type": "Boolean"
            },
            "class": "gdjs.RuntimeObject",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimeobject.js",
            "line": 667,
            "description": "Get the hit boxes for the object.<br>\nThe default implementation returns a basic bouding box based on the result of getWidth and\ngetHeight. You should probably redefine updateHitBoxes instead of this function.",
            "itemtype": "method",
            "name": "getHitBoxes",
            "return": {
                "description": "An array composed of polygon.",
                "type": "Array"
            },
            "class": "gdjs.RuntimeObject",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimeobject.js",
            "line": 688,
            "description": "Update the hit boxes for the object.<br>\nThe default implementation set a basic bouding box based on the result of getWidth and\ngetHeight.\n\nYou should not call this function by yourself, it is called when necessary by getHitBoxes method.\nHowever, you can redefine it if your object need custom hit boxes.",
            "itemtype": "method",
            "name": "updateHitBoxes",
            "class": "gdjs.RuntimeObject",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimeobject.js",
            "line": 738,
            "description": "Call each automatism stepPreEvents method.",
            "itemtype": "method",
            "name": "stepAutomatismsPreEvents",
            "class": "gdjs.RuntimeObject",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimeobject.js",
            "line": 748,
            "description": "Call each automatism stepPostEvents method.",
            "itemtype": "method",
            "name": "stepAutomatismsPostEvents",
            "class": "gdjs.RuntimeObject",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimeobject.js",
            "line": 758,
            "description": "Get an automatism from its name.<br>\nBe careful, the automatism must exists, no check is made on the name.",
            "itemtype": "method",
            "name": "getAutomatism",
            "params": [
                {
                    "name": "name",
                    "description": "The automatism name.",
                    "type": "String"
                }
            ],
            "class": "gdjs.RuntimeObject",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimeobject.js",
            "line": 768,
            "description": "Check if an automatism is used by the object.",
            "itemtype": "method",
            "name": "hasAutomatism",
            "params": [
                {
                    "name": "name",
                    "description": "The automatism name.",
                    "type": "String"
                }
            ],
            "class": "gdjs.RuntimeObject",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimeobject.js",
            "line": 778,
            "description": "De/activate an automatism of the object.<br>",
            "itemtype": "method",
            "name": "activateAutomatism",
            "params": [
                {
                    "name": "name",
                    "description": "The automatism name.",
                    "type": "String"
                },
                {
                    "name": "enable",
                    "description": "true to activate the automatism",
                    "type": "Boolean"
                }
            ],
            "class": "gdjs.RuntimeObject",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimeobject.js",
            "line": 791,
            "description": "De/activate an automatism of the object.<br>",
            "itemtype": "method",
            "name": "activateAutomatism",
            "params": [
                {
                    "name": "name",
                    "description": "The automatism name.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true if the automatism is activated."
            },
            "class": "gdjs.RuntimeObject",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimeobject.js",
            "line": 808,
            "description": "Separate the object from others objects, using their hitboxes.",
            "itemtype": "method",
            "name": "separateFromObjects",
            "params": [
                {
                    "name": "objectsLists",
                    "description": "Tables of objects"
                }
            ],
            "class": "gdjs.RuntimeObject",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimeobject.js",
            "line": 859,
            "description": "Put the object around a position, with a specific distance and angle.<br>\nThe distance is computed between the position and the center of the object.",
            "itemtype": "method",
            "name": "putAround",
            "params": [
                {
                    "name": "x",
                    "description": "The x position of the target",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y position of the target",
                    "type": "Number"
                },
                {
                    "name": "distance",
                    "description": "The distance between the object and the target",
                    "type": "Number"
                },
                {
                    "name": "angleInDegrees",
                    "description": "The angle between the object and the target, in degrees.",
                    "type": "Number"
                }
            ],
            "class": "gdjs.RuntimeObject",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimeobject.js",
            "line": 876,
            "description": "Put the object around another object, with a specific distance and angle.<br>\nThe distance is computed between the centers of the objects.",
            "itemtype": "method",
            "name": "putAround",
            "params": [
                {
                    "name": "obj",
                    "description": "The target object"
                },
                {
                    "name": "distance",
                    "description": "The distance between the object and the target",
                    "type": "Number"
                },
                {
                    "name": "angleInDegrees",
                    "description": "The angle between the object and the target, in degrees.",
                    "type": "Number"
                }
            ],
            "class": "gdjs.RuntimeObject",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimeobject.js",
            "line": 890,
            "itemtype": "method",
            "name": "separateObjectsWithoutForces",
            "deprecated": true,
            "params": [
                {
                    "name": "objectsLists",
                    "description": "Tables of objects"
                }
            ],
            "class": "gdjs.RuntimeObject",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimeobject.js",
            "line": 923,
            "itemtype": "method",
            "name": "SeparateObjectsWithForces",
            "deprecated": true,
            "params": [
                {
                    "name": "objectsLists",
                    "description": "Tables of objects"
                }
            ],
            "class": "gdjs.RuntimeObject",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimeobject.js",
            "line": 973,
            "description": "Return true if the hitboxes of two objects are overlapping",
            "itemtype": "method",
            "name": "collisionTest",
            "static": 1,
            "params": [
                {
                    "name": "obj1",
                    "description": "The first runtimeObject"
                },
                {
                    "name": "obj2",
                    "description": "The second runtimeObject"
                }
            ],
            "class": "gdjs.RuntimeObject",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimeobject.js",
            "line": 1017,
            "description": "Check the distance between two objects.",
            "itemtype": "method",
            "name": "distanceTest",
            "static": 1,
            "class": "gdjs.RuntimeObject",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimeobject.js",
            "line": 1029,
            "description": "Get the identifier associated to an object name :<br>\nSome features may want to compare objects name a large number of time. In this case,\nit may be more efficient to compare objects name identifier ( see gdjs.RuntimeObject.getNameId ).",
            "itemtype": "method",
            "name": "getNameIdentifier",
            "static": 1,
            "class": "gdjs.RuntimeObject",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimescene.js",
            "line": 47,
            "description": "Should be called when the canvas where the scene is rendered has been resized.\nSee gdjs.RuntimeGame.startStandardGameLoop in particular.",
            "itemtype": "method",
            "name": "onCanvasResized",
            "class": "gdjs.RuntimeScene",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimescene.js",
            "line": 58,
            "description": "Load the runtime scene from the given scene.",
            "itemtype": "method",
            "name": "loadFromScene",
            "params": [
                {
                    "name": "sceneData",
                    "description": "An object containing the scene data."
                }
            ],
            "class": "gdjs.RuntimeScene",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimescene.js",
            "line": 149,
            "description": "Create objects from initial instances data ( for example, the initial instances\nof the scene or from an external layout ).",
            "itemtype": "method",
            "name": "createObjectsFrom",
            "params": [
                {
                    "name": "data",
                    "description": "The instances data"
                },
                {
                    "name": "xPos",
                    "description": "The offset on X axis"
                },
                {
                    "name": "yPos",
                    "description": "The offset on Y axis"
                }
            ],
            "class": "gdjs.RuntimeScene",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimescene.js",
            "line": 175,
            "description": "Set the function called each time the runtimeScene is stepped.<br>\nThe function will be passed the runtimeScene as argument.\n\nNote this.this is already set up by the runtimeScene constructor and this.you should\nnot need to use this method.",
            "itemtype": "method",
            "name": "setEventsFunction",
            "params": [
                {
                    "name": "The",
                    "description": "function to be called."
                }
            ],
            "class": "gdjs.RuntimeScene",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimescene.js",
            "line": 189,
            "description": "Step and render the scene.<br>\nShould be called in a game loop.",
            "itemtype": "method",
            "name": "renderAndStep",
            "return": {
                "description": "true if the game loop should continue, false if a scene change or a game stop was\nrequested."
            },
            "class": "gdjs.RuntimeScene",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimescene.js",
            "line": 209,
            "description": "Render the PIXI stage associated to the runtimeScene.",
            "itemtype": "method",
            "name": "render",
            "class": "gdjs.RuntimeScene",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimescene.js",
            "line": 218,
            "description": "Called when rendering to do all times related tasks.",
            "itemtype": "method",
            "name": "_updateTime",
            "access": "private",
            "tagname": "",
            "class": "gdjs.RuntimeScene",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimescene.js",
            "line": 238,
            "description": "Empty the list of the removed objects:<br>\nWhen an object is removed from the scene, it is still kept in the _instancesRemoved member\nof the RuntimeScene.<br>\nThis method should be called regularly ( after events or automatisms steps ) so as to clear this list\nand allows the removed objects to be cached ( or destroyed if the cache is full ).<br>\nThe removed objects could not be sent directly to the cache, as events may still be using them after\nremoving them from the scene for example.",
            "itemtype": "method",
            "name": "_cacheOrClearRemovedInstances",
            "access": "private",
            "tagname": "",
            "class": "gdjs.RuntimeScene",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimescene.js",
            "line": 260,
            "description": "Tool function filling _allObjectsList member with all the instances.",
            "itemtype": "method",
            "name": "_constructListOfAllObjects",
            "access": "private",
            "tagname": "",
            "class": "gdjs.RuntimeScene",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimescene.js",
            "line": 285,
            "description": "Update the objects before launching the events.",
            "itemtype": "method",
            "name": "_updateObjectsPreEvents",
            "access": "private",
            "tagname": "",
            "class": "gdjs.RuntimeScene",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimescene.js",
            "line": 302,
            "description": "Update the objects (update positions, time management...)",
            "itemtype": "method",
            "name": "_updateObjects",
            "access": "private",
            "tagname": "",
            "class": "gdjs.RuntimeScene",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimescene.js",
            "line": 324,
            "description": "Change the background color",
            "itemtype": "method",
            "name": "setBackgroundColor",
            "class": "gdjs.RuntimeScene",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimescene.js",
            "line": 332,
            "description": "Get the name of the scene.",
            "itemtype": "method",
            "name": "getName",
            "class": "gdjs.RuntimeScene",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimescene.js",
            "line": 340,
            "description": "Update the objects positions according to their forces",
            "itemtype": "method",
            "name": "updateObjectsForces",
            "class": "gdjs.RuntimeScene",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimescene.js",
            "line": 361,
            "description": "Add an object to the instances living on the scene.",
            "itemtype": "method",
            "name": "addObject",
            "params": [
                {
                    "name": "obj",
                    "description": "The object to be added."
                }
            ],
            "class": "gdjs.RuntimeScene",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimescene.js",
            "line": 375,
            "description": "Get all the instances of the object called name.",
            "itemtype": "method",
            "name": "getObjects",
            "params": [
                {
                    "name": "name",
                    "description": "Name of the object the instances must be returned."
                }
            ],
            "class": "gdjs.RuntimeScene",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimescene.js",
            "line": 389,
            "description": "Create a new object from its name. The object is also added to the instances\nliving on the scene ( No need to call RuntimeScene.addObject )",
            "params": [
                {
                    "name": "objectName",
                    "description": "The name of the object to be created",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The created object"
            },
            "class": "gdjs.RuntimeScene",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimescene.js",
            "line": 419,
            "description": "Must be called whenever an object must be removed from the scene.",
            "itemtype": "method",
            "name": "markObjectForDeletion",
            "params": [
                {
                    "name": "object",
                    "description": "The object to be removed."
                }
            ],
            "class": "gdjs.RuntimeScene",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimescene.js",
            "line": 455,
            "description": "Return the time elapsed since the last frame, in milliseconds.",
            "itemtype": "method",
            "name": "getElapsedTime",
            "class": "gdjs.RuntimeScene",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimescene.js",
            "line": 463,
            "description": "Create an identifier for a new object of the scene.",
            "itemtype": "method",
            "name": "createNewUniqueId",
            "class": "gdjs.RuntimeScene",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimescene.js",
            "line": 472,
            "description": "Get the PIXI.Stage associated to the RuntimeScene.",
            "itemtype": "method",
            "name": "getPIXIStage",
            "class": "gdjs.RuntimeScene",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimescene.js",
            "line": 480,
            "description": "Get the PIXI renderer associated to the RuntimeScene.",
            "itemtype": "method",
            "name": "getPIXIRenderer",
            "class": "gdjs.RuntimeScene",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimescene.js",
            "line": 488,
            "description": "Get the PIXI DisplayObjectContainer associated to the RuntimeScene.",
            "itemtype": "method",
            "name": "getPIXIContainer",
            "class": "gdjs.RuntimeScene",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimescene.js",
            "line": 496,
            "description": "Get the runtimeGame associated to the RuntimeScene.",
            "itemtype": "method",
            "name": "getGame",
            "class": "gdjs.RuntimeScene",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimescene.js",
            "line": 504,
            "description": "Get the variables of the runtimeScene.",
            "itemtype": "method",
            "name": "getVariables",
            "return": {
                "description": "The container holding the variables of the scene."
            },
            "class": "gdjs.RuntimeScene",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimescene.js",
            "line": 513,
            "description": "Get the data representing the initial shared data of the scene for the specified automatism.",
            "itemtype": "method",
            "name": "getInitialSharedDataForAutomatism",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the automatism",
                    "type": "String"
                }
            ],
            "class": "gdjs.RuntimeScene",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimescene.js",
            "line": 557,
            "description": "Get the soundManager of the scene.",
            "return": {
                "description": "The soundManager of the scene."
            },
            "class": "gdjs.RuntimeScene",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimescene.js",
            "line": 565,
            "description": "Return true if the scene is rendering its first frame.",
            "itemtype": "method",
            "name": "isFirstFrame",
            "class": "gdjs.RuntimeScene",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimescene.js",
            "line": 573,
            "description": "Set the time scale of the scene",
            "itemtype": "method",
            "name": "setTimeScale",
            "params": [
                {
                    "name": "timeScale",
                    "description": "The new time scale ( Must be positive ).",
                    "type": "Number"
                }
            ],
            "class": "gdjs.RuntimeScene",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimescene.js",
            "line": 582,
            "description": "Get the time scale of the scene",
            "itemtype": "method",
            "name": "getTimeScale",
            "class": "gdjs.RuntimeScene",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimescene.js",
            "line": 590,
            "description": "Return true if the scene requested the game to be stopped.",
            "itemtype": "method",
            "name": "gameStopRequested",
            "class": "gdjs.RuntimeScene",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimescene.js",
            "line": 598,
            "description": "When called, the scene will be flagged as requesting the game to be stopped.<br>\n( i.e: gameStopRequested will return true ).",
            "itemtype": "method",
            "name": "requestGameStop",
            "class": "gdjs.RuntimeScene",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimescene.js",
            "line": 608,
            "description": "Return the name of the new scene to be launched instead of this one.",
            "itemtype": "method",
            "name": "getRequestedScene",
            "class": "gdjs.RuntimeScene",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\runtimescene.js",
            "line": 616,
            "description": "When called, the scene will be flagged as requesting a new scene to be launched.",
            "itemtype": "method",
            "name": "requestSceneChange",
            "class": "gdjs.RuntimeScene",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\spriteruntimeobject.js",
            "line": 82,
            "description": "Get a point of the frame.<br>\nIf the point does not exist, the origin is returned.",
            "itemtype": "method",
            "name": "getPoint",
            "return": {
                "description": "The requested point."
            },
            "class": "gdjs.SpriteAnimationFrame",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\spriteruntimeobject.js",
            "line": 199,
            "description": "Initialize the extra parameters that could be set for an instance.",
            "class": "gdjs.SpriteRuntimeObject",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\spriteruntimeobject.js",
            "line": 216,
            "description": "Update the internal PIXI.Sprite position, angle...",
            "class": "gdjs.SpriteRuntimeObject",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\spriteruntimeobject.js",
            "line": 248,
            "description": "Update the internal texture of the PIXI sprite.",
            "class": "gdjs.SpriteRuntimeObject",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\spriteruntimeobject.js",
            "line": 272,
            "description": "Update the current frame according to the elapsed time.",
            "itemtype": "method",
            "name": "updateTime",
            "class": "gdjs.SpriteRuntimeObject",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\spriteruntimeobject.js",
            "line": 308,
            "description": "Update the hit boxes for the object: <br>\nFallback to the default implementation (rotated bounding box) if there is no custom\nhitboxes defined for the current animation frame.",
            "itemtype": "method",
            "name": "updateHitBoxes",
            "class": "gdjs.SpriteRuntimeObject",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\spriteruntimeobject.js",
            "line": 412,
            "description": "Change the current frame displayed by the animation",
            "class": "gdjs.SpriteRuntimeObject",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\spriteruntimeobject.js",
            "line": 429,
            "description": "Get the index of the current frame displayed by the animation",
            "class": "gdjs.SpriteRuntimeObject",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\spriteruntimeobject.js",
            "line": 436,
            "description": "Return true if animation has ended.",
            "class": "gdjs.SpriteRuntimeObject",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\spriteruntimeobject.js",
            "line": 478,
            "description": "Return an array containing the coordinates of the point passed as parameter\nin world coordinates (as opposed to the object local coordinates).\n\nBeware: this._animationFrame and this._sprite must *not* be null!\n\nAll transformations (flipping, scale, rotation) are supported.",
            "params": [
                {
                    "name": "pointX",
                    "description": "The X position of the point, in object coordinates."
                },
                {
                    "name": "pointY",
                    "description": "The Y position of the point, in object coordinates."
                },
                {
                    "name": "result",
                    "description": "Optional array that will be updated with the result (x and y position of the point\nin global coordinates)"
                }
            ],
            "return": {
                "description": "An array containing the x and y position of the point in global coordinates. If result parameter is\ndefined, nothing is returned by the method."
            },
            "itemtype": "method",
            "name": "_transformToGlobal",
            "access": "private",
            "tagname": "",
            "class": "gdjs.SpriteRuntimeObject",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\spriteruntimeobject.js",
            "line": 742,
            "description": "Set the Z order of the object.",
            "itemtype": "method",
            "name": "setZOrder",
            "params": [
                {
                    "name": "z",
                    "description": "The new Z order position of the object",
                    "type": "Number"
                }
            ],
            "class": "gdjs.SpriteRuntimeObject",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\spriteruntimeobject.js",
            "line": 756,
            "itemtype": "method",
            "name": "turnTowardObject",
            "params": [
                {
                    "name": "obj",
                    "description": "The target object"
                },
                {
                    "name": "scene",
                    "description": "The scene containing the object"
                }
            ],
            "deprecated": true,
            "class": "gdjs.SpriteRuntimeObject",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\spriteruntimeobject.js",
            "line": 770,
            "description": "Return true if the cursor is on the object.<br>\nTODO : Support layer's camera rotation.",
            "itemtype": "method",
            "name": "cursorOnObject",
            "return": {
                "description": "true if the cursor is on the object."
            },
            "class": "gdjs.SpriteRuntimeObject",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\storagetools.js",
            "line": 17,
            "description": "Load into memory a JSON object stored in the local storage object\nprovided by the browser.\nThe JSON object is named GDJS_filename in the localStorage object.",
            "itemtype": "method",
            "name": "loadJSONFileFromStorage",
            "params": [
                {
                    "name": "filename",
                    "description": "The name of the JSON object",
                    "type": "String"
                }
            ],
            "static": 1,
            "access": "private",
            "tagname": "",
            "class": "gdjs.evtTools.storage",
            "namespace": "gdjs.evtTools"
        },
        {
            "file": "..\\Runtime\\storagetools.js",
            "line": 38,
            "description": "Unload from memory a JSON object, which is then stored in the local storage \nobject provided by the browser.\nThe JSON object is named GDJS_filename in the localStorage object.",
            "itemtype": "method",
            "name": "loadJSONFileFromStorage",
            "params": [
                {
                    "name": "filename",
                    "description": "The name of the JSON object",
                    "type": "String"
                }
            ],
            "static": 1,
            "access": "private",
            "tagname": "",
            "class": "gdjs.evtTools.storage",
            "namespace": "gdjs.evtTools"
        },
        {
            "file": "..\\Runtime\\stringtools.js",
            "line": 17,
            "description": "Return a string containing a new line character.",
            "itemtype": "method",
            "name": "newLine",
            "access": "private",
            "tagname": "",
            "class": "gdjs.evtTools.string",
            "namespace": "gdjs.evtTools"
        },
        {
            "file": "..\\Runtime\\stringtools.js",
            "line": 26,
            "description": "Return a new string containing the substring of the original string.",
            "itemtype": "method",
            "name": "subStr",
            "access": "private",
            "tagname": "",
            "class": "gdjs.evtTools.string",
            "namespace": "gdjs.evtTools"
        },
        {
            "file": "..\\Runtime\\stringtools.js",
            "line": 38,
            "description": "Return a new string containing the character at the specified position.",
            "itemtype": "method",
            "name": "strAt",
            "access": "private",
            "tagname": "",
            "class": "gdjs.evtTools.string",
            "namespace": "gdjs.evtTools"
        },
        {
            "file": "..\\Runtime\\stringtools.js",
            "line": 50,
            "description": "Return the length of the string",
            "itemtype": "method",
            "name": "strLen",
            "access": "private",
            "tagname": "",
            "class": "gdjs.evtTools.string",
            "namespace": "gdjs.evtTools"
        },
        {
            "file": "..\\Runtime\\stringtools.js",
            "line": 59,
            "description": "Search in a string",
            "itemtype": "method",
            "name": "strFind",
            "access": "private",
            "tagname": "",
            "class": "gdjs.evtTools.string",
            "namespace": "gdjs.evtTools"
        },
        {
            "file": "..\\Runtime\\stringtools.js",
            "line": 68,
            "description": "Reverse search in a string",
            "itemtype": "method",
            "name": "strRFind",
            "access": "private",
            "tagname": "",
            "class": "gdjs.evtTools.string",
            "namespace": "gdjs.evtTools"
        },
        {
            "file": "..\\Runtime\\stringtools.js",
            "line": 77,
            "description": "Search in a string, starting from a specified position.",
            "itemtype": "method",
            "name": "strFindFrom",
            "access": "private",
            "tagname": "",
            "class": "gdjs.evtTools.string",
            "namespace": "gdjs.evtTools"
        },
        {
            "file": "..\\Runtime\\stringtools.js",
            "line": 86,
            "description": "Reverse search in a string, starting from a specified position.",
            "itemtype": "method",
            "name": "strRFindFrom",
            "access": "private",
            "tagname": "",
            "class": "gdjs.evtTools.string",
            "namespace": "gdjs.evtTools"
        },
        {
            "file": "..\\Runtime\\timer.js",
            "line": 21,
            "description": "Get the name of the timer",
            "itemtype": "method",
            "name": "getName",
            "return": {
                "description": "The name of the timer",
                "type": "String"
            },
            "class": "gdjs.Timer",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\timer.js",
            "line": 30,
            "description": "Get the time elapsed",
            "itemtype": "method",
            "name": "getTime",
            "return": {
                "description": "The time of the timer",
                "type": "String"
            },
            "class": "gdjs.Timer",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\timer.js",
            "line": 39,
            "description": "Notify the timer this.some time elapsed.",
            "itemtype": "method",
            "name": "updateTime",
            "class": "gdjs.Timer",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\timer.js",
            "line": 47,
            "description": "Change the time.",
            "itemtype": "method",
            "name": "setTime",
            "class": "gdjs.Timer",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\timer.js",
            "line": 55,
            "description": "Set time to zero.",
            "itemtype": "method",
            "name": "reset",
            "class": "gdjs.Timer",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\timer.js",
            "line": 63,
            "description": "Set if the timer is paused.",
            "itemtype": "method",
            "name": "setPaused",
            "class": "gdjs.Timer",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\timer.js",
            "line": 71,
            "description": "Check if the timer is paused.",
            "itemtype": "method",
            "name": "isPaused",
            "class": "gdjs.Timer",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\variable.js",
            "line": 59,
            "description": "Used ( usually by VariablesContainer ) to set that the variable must be\nconsidered as not existing in the container.",
            "itemtype": "method",
            "name": "setUndefinedInContainer",
            "class": "gdjs.Variable",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\variable.js",
            "line": 68,
            "description": "Check if the variable must be considered as not existing in its container\n( Usually a VariablesContainer ).",
            "itemtype": "method",
            "name": "isUndefinedInContainer",
            "return": {
                "description": "true if the container must consider that the variable does not exist."
            },
            "class": "gdjs.Variable",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\variable.js",
            "line": 78,
            "description": "Get the child with the specified name.\n\nIf the variable has not the specified child, an empty variable with the specified name\nis added as child.",
            "itemtype": "method",
            "name": "getChild",
            "class": "gdjs.Variable",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\variable.js",
            "line": 95,
            "description": "Get the child with the specified name.\n\nIf the variable has not the specified child, an empty variable with the specified name\nis added as child.",
            "itemtype": "method",
            "name": "getChild",
            "class": "gdjs.Variable",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\variable.js",
            "line": 106,
            "description": "Remove the child with the specified name.\n\nIf the variable has not the specified child, nothing is done.",
            "itemtype": "method",
            "name": "removeChild",
            "params": [
                {
                    "name": "childName",
                    "description": "The name of the child to be removed"
                }
            ],
            "class": "gdjs.Variable",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\variable.js",
            "line": 118,
            "description": "Get the value of the variable, considered as a number",
            "itemtype": "method",
            "name": "getAsNumber",
            "return": {
                "description": "The number stored",
                "type": "Number"
            },
            "class": "gdjs.Variable",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\variable.js",
            "line": 133,
            "description": "Change the value of the variable, considered as a number",
            "itemtype": "method",
            "name": "setNumber",
            "params": [
                {
                    "name": "newValue",
                    "description": "The new value to be set",
                    "type": "Number"
                }
            ],
            "class": "gdjs.Variable",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\variable.js",
            "line": 144,
            "description": "Get the value of the variable, considered as a string",
            "itemtype": "method",
            "name": "getAsString",
            "return": {
                "description": "The number stored",
                "type": "String"
            },
            "class": "gdjs.Variable",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\variable.js",
            "line": 158,
            "description": "Change the value of the variable, considered as a string",
            "itemtype": "method",
            "name": "setString",
            "params": [
                {
                    "name": "newValue",
                    "description": "The new string to be set",
                    "type": "String"
                }
            ],
            "class": "gdjs.Variable",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\variable.js",
            "line": 169,
            "description": "Return true if the variable is a structure.",
            "itemtype": "method",
            "name": "isStructure",
            "class": "gdjs.Variable",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\variable.js",
            "line": 177,
            "description": "Return true if the variable is a number.",
            "itemtype": "method",
            "name": "isNumber",
            "class": "gdjs.Variable",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\variable.js",
            "line": 185,
            "description": "Return the object containing all the children of the variable",
            "itemtype": "method",
            "name": "getAllChildren",
            "class": "gdjs.Variable",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\variablescontainer.js",
            "line": 24,
            "description": "Initialize variables from a container data.<br>\nIf keepOldVariables is set to false ( by default ), all already existing variables will be\nerased, but the new variables will be accessible thanks to getFromIndex. <br>\nif keepOldVariables is set to true, already existing variables won't be erased and will be\nstill accessible thanks to getFromIndex.",
            "itemtype": "method",
            "name": "initFrom",
            "params": [
                {
                    "name": "data",
                    "description": "The object containing the variables."
                },
                {
                    "name": "keepOldVariables",
                    "description": "If set to true, already existing variables won't be erased.",
                    "type": "Boolean"
                }
            ],
            "class": "gdjs.VariablesContainer",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\variablescontainer.js",
            "line": 75,
            "description": "Add a new variable.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "name",
                    "description": "Variable name",
                    "type": "String"
                },
                {
                    "name": "variable",
                    "description": "The variable to be added"
                }
            ],
            "class": "gdjs.VariablesContainer",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\variablescontainer.js",
            "line": 85,
            "description": "Remove a variable.<br>\n( In fact, the variable is not really removed from the container to avoid creating garbage )",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "name",
                    "description": "Variable to be removed",
                    "type": "String"
                }
            ],
            "class": "gdjs.VariablesContainer",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\variablescontainer.js",
            "line": 97,
            "description": "Get a variable.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "name",
                    "description": "The variable's name",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The specified variable. If not found, an empty variable is added to the container."
            },
            "class": "gdjs.VariablesContainer",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\variablescontainer.js",
            "line": 119,
            "description": "Get a variable using its index.<br>\nThe index of a variable is its index in the data passed to initFrom.<br>\n\nThis method is generally used by events generated code to increase lookup speed for variables.<br>\nIf you're unsure about how to use this method, prefer to use get.",
            "itemtype": "method",
            "name": "getFromIndex",
            "params": [
                {
                    "name": "id",
                    "description": "The variable index",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The specified variable. If not found, an empty variable is added to the container, but it\nshould not happen."
            },
            "class": "gdjs.VariablesContainer",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\variablescontainer.js",
            "line": 145,
            "description": "Check if a variable exists in the container",
            "itemtype": "method",
            "name": "has",
            "params": [
                {
                    "name": "name",
                    "description": "The variable's name",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true if the variable exists."
            },
            "class": "gdjs.VariablesContainer",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\variablescontainer.js",
            "line": 156,
            "description": "\"Bad\" variable container, used by events when no other valid container can be found.\nThis container has no state and always returns the bad variable ( see gdjs.VariablesContainer.badVariable ).",
            "static": 1,
            "class": "gdjs.VariablesContainer",
            "namespace": "gdjs"
        },
        {
            "file": "..\\Runtime\\variablescontainer.js",
            "line": 170,
            "description": "\"Bad\" variable, used by events when no other valid variable can be found.\nThis variable has no state and always return 0 or the empty string.",
            "static": 1,
            "class": "gdjs.VariablesContainer",
            "namespace": "gdjs"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: note",
            "line": " ..\\Runtime\\gd.js:19"
        },
        {
            "message": "Missing item type",
            "line": " ..\\Runtime\\gd.js:7"
        },
        {
            "message": "Missing item type\nConvert a rgb color value to a hex value.",
            "line": " ..\\Runtime\\gd.js:19"
        },
        {
            "message": "Missing item type\nUpdate the position of the PIXI container. To be called after each change\nmade to position, zoom or rotation of the camera.",
            "line": " ..\\Runtime\\layer.js:37"
        },
        {
            "message": "Missing item type\nDo the work of creating a new object",
            "line": " ..\\Runtime\\objecttools.js:291"
        },
        {
            "message": "Missing item type\nAllows events to create a new object on a scene.",
            "line": " ..\\Runtime\\objecttools.js:312"
        },
        {
            "message": "Missing item type\nAllows events to create a new object on a scene.",
            "line": " ..\\Runtime\\objecttools.js:320"
        },
        {
            "message": "Missing item type\nAllows events to get the number of objects picked.",
            "line": " ..\\Runtime\\objecttools.js:328"
        },
        {
            "message": "Missing item type\nSet if the aspect ratio must be kept when the game canvas is resized.",
            "line": " ..\\Runtime\\runtimegame.js:493"
        },
        {
            "message": "Missing item type\nChange the margin that must be preserved around the game canvas.",
            "line": " ..\\Runtime\\runtimegame.js:504"
        },
        {
            "message": "Missing item type\nCreate a new object from its name. The object is also added to the instances\nliving on the scene ( No need to call RuntimeScene.addObject )",
            "line": " ..\\Runtime\\runtimescene.js:389"
        },
        {
            "message": "Missing item type\nGet the soundManager of the scene.",
            "line": " ..\\Runtime\\runtimescene.js:557"
        },
        {
            "message": "Missing item type\nInitialize the extra parameters that could be set for an instance.",
            "line": " ..\\Runtime\\spriteruntimeobject.js:199"
        },
        {
            "message": "Missing item type\nUpdate the internal PIXI.Sprite position, angle...",
            "line": " ..\\Runtime\\spriteruntimeobject.js:216"
        },
        {
            "message": "Missing item type\nUpdate the internal texture of the PIXI sprite.",
            "line": " ..\\Runtime\\spriteruntimeobject.js:248"
        },
        {
            "message": "Missing item type\nChange the current frame displayed by the animation",
            "line": " ..\\Runtime\\spriteruntimeobject.js:412"
        },
        {
            "message": "Missing item type\nGet the index of the current frame displayed by the animation",
            "line": " ..\\Runtime\\spriteruntimeobject.js:429"
        },
        {
            "message": "Missing item type\nReturn true if animation has ended.",
            "line": " ..\\Runtime\\spriteruntimeobject.js:436"
        },
        {
            "message": "Missing item type\n\"Bad\" variable container, used by events when no other valid container can be found.\nThis container has no state and always returns the bad variable ( see gdjs.VariablesContainer.badVariable ).",
            "line": " ..\\Runtime\\variablescontainer.js:156"
        },
        {
            "message": "Missing item type\n\"Bad\" variable, used by events when no other valid variable can be found.\nThis variable has no state and always return 0 or the empty string.",
            "line": " ..\\Runtime\\variablescontainer.js:170"
        }
    ]
}